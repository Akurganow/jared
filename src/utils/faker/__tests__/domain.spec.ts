import Domain from 'utils/faker/domain'

describe('utils/faker/domain', () => {
	test('should be defined', () => {
		const domain = new Domain()

		expect(domain).toBeDefined()
		expect(domain).toBeInstanceOf(Domain)
		expect(domain).toHaveProperty('getDomain')
		expect(domain).toHaveProperty('reset')
	})
	test('should return a domain', () => {
		const domain = new Domain().getDomain()
		expect(domain).toBeDefined()
		expect(domain).toHaveProperty('domainName')
		expect(domain).toHaveProperty('name')
		expect(domain).toHaveProperty('protocol')
		expect(domain).toHaveProperty('suffix')
		expect(domain).toHaveProperty('full')
		expect(domain.domainName).toBeDefined()
		expect(domain.domainName).not.toBeNull()
		expect(domain.domainName).not.toBe('')
		expect(domain.name).toBeDefined()
		expect(domain.name).not.toBeNull()
		expect(domain.name).not.toBe('')
		expect(domain.protocol).toBeDefined()
		expect(domain.protocol).not.toBeNull()
		expect(domain.protocol).not.toBe('')
		expect(domain.suffix).toBeDefined()
		expect(domain.suffix).not.toBeNull()
		expect(domain.suffix).not.toBe('')
		expect(domain.full).toBeDefined()
		expect(domain.full).not.toBeNull()
		expect(domain.full).not.toBe('')
	})
	test('should return a domain with text = "https://example.com', () => {
		const domain = new Domain('https://example.com').getDomain()
		expect(domain.domainName).toBe('example.com')
		expect(domain.name).toBe('example')
		expect(domain.protocol).toBe('https')
		expect(domain.suffix).toBe('com')
		expect(domain.full).toBe('https://example.com')
	})
	test('should return a domain with text = "example.com', () => {
		const domain = new Domain('example.com').getDomain()
		expect(domain.domainName).toBe('example.com')
		expect(domain.name).toBe('example')
		expect(domain.suffix).toBe('com')
		expect(domain.full).toContain('example.com')
	})
	test('should return a domain with text = "www.example.com', () => {
		const domain = new Domain('www.example.com').getDomain()
		expect(domain.domainName).toBe('example.com')
		expect(domain.name).toBe('example')
		expect(domain.suffix).toBe('com')
		expect(domain.full).toContain('www.example.com')
	})
	test('should return a domain with text = "sub.example.com', () => {
		const domain = new Domain('sub.example.com').getDomain()
		expect(domain.domainName).toBe('sub.example.com')
		expect(domain.name).toBe('sub.example')
		expect(domain.suffix).toBe('com')
		expect(domain.full).toContain('sub.example.com')
	})
	test('should return a domain with text = "example.com/"', () => {
		const domain = new Domain('example.com/').getDomain()
		expect(domain.domainName).toBe('example.com')
		expect(domain.name).toBe('example')
		expect(domain.suffix).toBe('com')
		expect(domain.full).toContain('example.com')
	})
	test('should return a domain with text = "example', () => {
		const domain = new Domain('example').getDomain()
		expect(domain.domainName).toContain('example')
		expect(domain.name).toBe('example')
		expect(domain.suffix).toBeDefined()
		expect(domain.full).toContain('example')
	})
})
